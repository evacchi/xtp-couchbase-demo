// THIS FILE WAS GENERATED BY `xtp-rust-bindgen`. DO NOT EDIT.

#![allow(non_snake_case)]
use extism_pdk::*;
use serde::{Deserialize, Serialize};

fn return_error(e: Error) -> i32 {
    let err = format!("{:?}", e);
    let mem = extism_pdk::Memory::from_bytes(&err).unwrap();
    unsafe {
        extism_pdk::extism::error_set(mem.offset());
    }
    -1
}

macro_rules! try_input {
    () => {{
        let x = input();
        match x {
            Ok(x) => x,
            Err(e) => return return_error(e),
        }
    }};
}

macro_rules! try_input_json {
    () => {{
        let x = input();
        match x {
            Ok(Json(x)) => x,
            Err(e) => return return_error(e),
        }
    }};
}

#[no_mangle]
pub extern "C" fn transform() -> i32 {
    let ret = crate::transform(try_input_json!()).and_then(output);

    match ret {
        Ok(()) => 0,
        Err(e) => return_error(e),
    }
}

#[derive(Serialize, Deserialize, FromBytes, ToBytes)]
#[encoding(Json)]
pub struct DataRecord {
    #[serde(rename = "doc")]
    pub doc: String,
    #[serde(rename = "meta")]
    pub meta: String,
}

#[derive(Serialize, Deserialize, FromBytes, ToBytes)]
#[encoding(Json)]
pub struct EmitRecord {
    #[serde(rename = "key")]
    pub key: String,
    #[serde(rename = "value")]
    pub value: String,
}

mod raw_imports {
    use super::*;
    #[host_fn]
    extern "ExtismHost" {

        pub(crate) fn emit(input: Json<EmitRecord>);

    }
}

// emit
// It takes input of EmitRecord (An emit key/value pair)
#[allow(unused)]
pub(crate) fn emit(input: EmitRecord) -> Result<(), extism_pdk::Error> {
    let res = unsafe { raw_imports::emit(Json(input))? };

    Ok(res)
}
